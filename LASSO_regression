LASSO Regression for Nanocrystalline Data Analysis

This analysis employs LASSO regression (Least Absolute Shrinkage and Selection Operator) to model the relationship between the Spall Strength of nanocrystalline materials and two independent variables: Peak Shock Pressure and Strain Rate. Below is an overview of the step-by-step procedure used in the code.

1. Importing Libraries

To begin, several Python libraries are imported, which provide essential tools for data manipulation, statistical analysis, machine learning, and visualization:
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy import stats
from sklearn.linear_model import LassoCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import MinMaxScaler
import os
import imageio
from mpl_toolkits.mplot3d import Axes3D
• pandas and numpy are used for data manipulation.
• matplotlib for visualizations, and mpl_toolkits.mplot3d for 3D plotting.
• scipy provides statistical functions like zscore for outlier detection.
• sklearn is used for regression modeling (LassoCV), splitting datasets (train_test_split), and calculating model performance metrics (mean_squared_error, r2_score).

2. Directory Setup

An output directory LASSO_outputs is created to save the generated plots and results.
os.makedirs(output_dir, exist_ok=True)
3. Loading Datasets

The code loads datasets related to spall strength measurements for different energies (e.g., 800mJ, 1000mJ, etc.) into a dictionary:
datasets = {
    '800mJ': pd.read_csv('100nm_spall_strength_strain_rate_table_800mJ.csv'),
    ...
}
Each dataset contains values for Strain Rate, First Maxima (m/s), and Spall Strength (GPa).

4. Calculating Peak Shock Pressure

For each dataset, a new column for Peak Shock Pressure is calculated using the formula:


This formula combines material properties (density and acoustic velocity) with experimental data to compute the shock pressure at the point of spall fracture.
dataset['Peak Shock Pressure (GPa)'] = dataset['First Maxima (m/s)'] * 0.5 * density_copper * acoustic_velocity_copper * 1e-9
5. Data Cleaning: Outlier Removal

Outliers in the dataset are removed using z-scores. Any data points where the z-score of any feature exceeds a threshold (set to 3) are excluded.
def remove_outliers(data, columns, z_threshold=3):
    z_scores = np.abs(stats.zscore(data[columns]))
    return data[(z_scores < z_threshold).all(axis=1)]
6. Feature Engineering

The features for regression are defined as Peak Shock Pressure and Strain Rate, and the target variable is the Spall Strength:
X = all_data_filtered[['Peak Shock Pressure (GPa)', 'Strain Rate (s^-1)']]
y = all_data_filtered['Spall Strength (GPa)']
A log transformation is applied to the Strain Rate to improve the linearity of the relationship between the features and target.
X['Log Strain Rate'] = np.log(X['Strain Rate (s^-1)'])
7. Feature Scaling

To ensure that the features have the same scale, a MinMaxScaler is applied to normalize the Peak Shock Pressure and the log-transformed Strain Rate:
scaler = MinMaxScaler()
X_scaled = scaler.fit_transform(X[['Peak Shock Pressure (GPa)', 'Log Strain Rate']])
8. Data Splitting

The dataset is split into training and testing sets (70% for training and 30% for testing):
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.3, random_state=42)
9. Training the LASSO Model

A LASSO regression model is trained using cross-validation (5-fold). The LassoCV function automatically tunes the regularization parameter:
lasso_model = LassoCV(cv=5, random_state=42).fit(X_train, y_train)
10. Predictions and Performance Evaluation

The model’s performance is evaluated by making predictions on both the training and testing datasets. The Mean Squared Error (MSE) and R² score are calculated:
train_mse = mean_squared_error(y_train, y_train_pred)
test_mse = mean_squared_error(y_test, y_test_pred)
train_r2 = r2_score(y_train, y_train_pred)
test_r2 = r2_score(y_test, y_test_pred)
11. Visualization
• Scatter plots are generated to visualize the model’s predictions on both the training and testing datasets. A perfect fit line is plotted to compare actual vs. predicted values.
• A 3D surface plot is created to show the dependency of Spall Strength on Peak Shock Pressure and Strain Rate. The data points are overlaid on the surface for better visualization.
fig = plt.figure(figsize=(12, 8))
ax = fig.add_subplot(111, projection='3d')
ax.plot_surface(X_grid, Y_grid, Z_grid, cmap='viridis', alpha=0.8, edgecolor='none')
12. Rotating 3D Plot and GIF Generation

A rotating 3D surface plot is created and saved as a GIF to illustrate the model’s predictions in dynamic form:
for angle in range(0, 360, 5):
    ax.view_init(30, angle)
    plt.savefig(f"{output_dir}/frame_{angle}.png")
    gif_frames.append(imageio.imread(f"{output_dir}/frame_{angle}.png"))

imageio.mimsave(f"{output_dir}/rotating_surface.gif", gif_frames, duration=0.1)
Conclusion

This procedure demonstrates how to use LASSO regression to model and predict the Spall Strength of nanocrystalline materials. The code performs data cleaning, feature transformation, model training, and visualization to analyze the relationship between shock pressure, strain rate, and spall strength. The results are visualized through static plots and a rotating 3D surface plot.
